{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","obj","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQF,UAIdI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCZXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIb,SAAQ,SAACC,GAGhBA,EAFqBW,EAASE,KAAI,SAAAC,GAAI,OAC9BA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAKvEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAK7CL,EAAgBH,EAAO,SACvBG,EAAgBH,EAAO,OAKvBG,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC3BnC,IAIMe,EAAkB,SAACC,GACrB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GACzB,IAN2BC,EAAKC,EAM1BxB,GANqBuB,EAMa,IANRC,EAMa,IAL5CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAM9CnB,YAAW,WACYqB,KAAKE,SAAW,IAE/BxB,EAAQ,CAACkB,cAAarB,UAEtBsB,EAAOD,EAAYO,WAM7BC,EAAa,SAAAC,GACjBvB,QAAQC,IAAR,eAA2BsB,EAAIT,YAAYO,GAA3C,iBAA8DE,EAAI9B,MAAlE,OAGI+B,EAAW,SAAAH,GACfrB,QAAQyB,KAAR,gCAA6CJ,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC/BxB,KAAKoB,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/BxB,KAAKoB,GACLK,MAAMH,K","file":"main.d77e19e91497f5e093fa.js","sourcesContent":["const delay = ms => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(ms), ms})\r\n    })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve) => {\r\n        const updatedUsers = allUsers.map(user =>\r\n                user.name === userName ? { ...user, active: !user.active } : user);\r\n        resolve(updatedUsers);\r\n    })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                resolve({transaction, delay});\r\n            }\r\n                reject(transaction.id),\r\n            delay\r\n        })\r\n  })\r\n};\r\n\r\nconst logSuccess = obj => {\r\n  console.log(`Transaction ${obj.transaction.id} processed in ${obj.delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}